name: CI

on:
  push:
    branches:
      - main
    tags:
      - '*'

env:
  THEME_NAME: dcp
  CURL_URL: https://nossasdcp.hacklab.com.br/
  DEPLOY: 1

jobs:
  build_assets:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Remove dist directory
        run: rm -rf themes/${{ env.THEME_NAME }}/dist/*

      - name: Remove lock
        run: rm -f themes/${{ env.THEME_NAME }}/package-lock.json

      - name: Remove node_modules
        run: rm -rf themes/${{ env.THEME_NAME }}/node_modules

      - name: Install npm packages
        run: npm --prefix themes/${{ env.THEME_NAME }}/ install

      - name: Run production build
        run: npm --prefix themes/${{ env.THEME_NAME }}/ run production

      - name: Check files
        run: ls -lhtra themes/${{ env.THEME_NAME }}

      - name: Remove node_modules directory
        run: rm -rf themes/${{ env.THEME_NAME }}/node_modules

      - name: Upload artifact
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ env.THEME_NAME }}
          path: themes/${{ env.THEME_NAME }}

  create_release:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [build_assets]
    steps:
      - uses: actions/checkout@v4

      - name: Set Release Tag
        id: get_tag
        run: echo "tag=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Download artifact
        uses: actions/download-artifact@v3.0.2
        with:
          name: ${{ env.THEME_NAME }}
          path: ./${{ env.THEME_NAME }}/

      - name: Zip artifact
        run: zip -r ${{ env.THEME_NAME }}.zip ./${{ env.THEME_NAME }}

      - name: Create GitHub Release
        id: create_release_develop
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag }}
          release_name: Release ${{ env.tag }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release_develop.outputs.upload_url }}
          asset_path: ./${{ env.THEME_NAME }}.zip
          asset_name: ${{ env.THEME_NAME }}-${{ env.tag }}.zip
          asset_content_type: application/zip

      - name: Wait for asset to be available
        id: check_asset_availability
        run: |
          ASSET_NAME="${{ env.THEME_NAME }}-${{ env.tag }}.zip"
          REPO="https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ env.tag }}"
          ATTEMPTS=0
          MAX_ATTEMPTS=3
          SUCCESS=false

          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            echo "Checking for asset availability, attempt $((ATTEMPTS+1))..."
            ASSET_ID=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" $REPO | jq -r ".assets[] | select(.name==\"$ASSET_NAME\") | .id")
            if [ -n "$ASSET_ID" ]; then
              echo "Asset found. Asset ID: $ASSET_ID"
              SUCCESS=true
              break
            else
              echo "Asset not found. Retrying in 30 seconds..."
              ATTEMPTS=$((ATTEMPTS+1))
              sleep 30
            fi
          done

          echo "::set-output name=success::$SUCCESS"

          if [ "$SUCCESS" = false ]; then
            echo "Failed to find asset after $MAX_ATTEMPTS attempts."
            exit 1
          fi
        continue-on-error: false

      - name: Execute CURL after release
        if: steps.check_asset_availability.outputs.success == 'true' && env.DEPLOY != 0
        run: |
          curl "${{ env.CURL_URL }}wp-json/git-updater/v1/reset-branch/?key=${{ secrets.GIT_UPDATER_KEY }}&theme=${{ env.THEME_NAME }}"
          curl "${{ env.CURL_URL }}wp-json/git-updater/v1/update/?key=${{ secrets.GIT_UPDATER_KEY }}&theme=${{ env.THEME_NAME }}&tag=${{ env.tag }}&override"
